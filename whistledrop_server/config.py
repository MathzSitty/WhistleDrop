# whistledrop/whistledrop_server/config.py
import os

BASE_DIR = os.path.abspath(os.path.dirname(__file__))


class Config:
    # --- Security ---
    SECRET_KEY = os.environ.get('WHISTLEDROP_SECRET_KEY') or 'a-very-secret-dev-key-CHANGE-ME-IN-PROD'  # FÃ¼r Flask Session etc.
    # JOURNALIST_API_KEY is REMOVED. Authentication is now via username/password and sessions.

    # --- Storage ---
    DATA_DIR = os.path.join(BASE_DIR, "data")
    SUBMISSIONS_DIR = os.path.join(DATA_DIR, "submissions")
    KEY_DB_DIR = os.path.join(DATA_DIR, "db")
    KEY_DB_PATH = os.path.join(KEY_DB_DIR, "key_store.db") # For RSA keys and journalist accounts

    # --- Cryptography ---
    AES_KEY_SIZE = 32
    AES_NONCE_SIZE = 12

    # --- Server ---
    MAX_UPLOAD_SIZE_MB = 50
    MAX_CONTENT_LENGTH = MAX_UPLOAD_SIZE_MB * 1024 * 1024
    SERVER_HOST = "127.0.0.1" # Host for Flask app
    SERVER_PORT = 5000        # HTTP port for Flask app
    SERVER_HTTPS_PORT = 5001  # HTTPS port for Flask app (if running SSL directly in Flask)

    # SSL Certificate paths (for running Flask with HTTPS)
    # These will be generated by a utility script.
    # Ensure these files exist if SSL is enabled directly in Flask.
    SSL_CERT_PATH = os.path.join(BASE_DIR, "certs", "cert.pem")
    SSL_KEY_PATH = os.path.join(BASE_DIR, "certs", "key.pem")


    # --- Tor Control ---
    TOR_CONTROL_PORT = 9051
    TOR_CONTROL_PASSWORD = os.environ.get('TOR_CONTROL_PASSWORD')

    @staticmethod
    def ensure_dirs_exist():
        os.makedirs(Config.SUBMISSIONS_DIR, exist_ok=True)
        os.makedirs(Config.KEY_DB_DIR, exist_ok=True)
        os.makedirs(os.path.join(BASE_DIR, "certs"), exist_ok=True) # For SSL certs

Config.ensure_dirs_exist()